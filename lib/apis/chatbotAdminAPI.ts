"use client";

/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Chatbot Admin API
 * NestJS chatbot admin application with Slack integration and web crawling
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  AdvancedCrawlRequest,
  AdvancedCrawlResult,
  BotMessagesResponse,
  CrawlRequest,
  CrawlResult,
  DeleteMessageRequest,
  MessageActionResponse,
  SearchRequest,
  SendMessageRequest,
  SlackControllerGetBotMessagesParams,
  SlackControllerGetBotStatsParams,
  UpdateMessageRequest,
} from "./model";

import { customInstance } from "./mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const appControllerGetHello = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getAppControllerGetHelloQueryKey = () => {
  return [
    `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/`,
  ] as const;
};

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = unknown;

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Basic web page crawling
 */
export const crawlingControllerCrawlUrl = (
  crawlRequest: CrawlRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CrawlResult>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/crawling/crawl`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: crawlRequest,
      signal,
    },
    options
  );
};

export const getCrawlingControllerCrawlUrlMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof crawlingControllerCrawlUrl>>,
    TError,
    { data: CrawlRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof crawlingControllerCrawlUrl>>,
  TError,
  { data: CrawlRequest },
  TContext
> => {
  const mutationKey = ["crawlingControllerCrawlUrl"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof crawlingControllerCrawlUrl>>,
    { data: CrawlRequest }
  > = (props) => {
    const { data } = props ?? {};

    return crawlingControllerCrawlUrl(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CrawlingControllerCrawlUrlMutationResult = NonNullable<
  Awaited<ReturnType<typeof crawlingControllerCrawlUrl>>
>;
export type CrawlingControllerCrawlUrlMutationBody = CrawlRequest;
export type CrawlingControllerCrawlUrlMutationError = unknown;

/**
 * @summary Basic web page crawling
 */
export const useCrawlingControllerCrawlUrl = <
  TError = unknown,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof crawlingControllerCrawlUrl>>,
      TError,
      { data: CrawlRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof crawlingControllerCrawlUrl>>,
  TError,
  { data: CrawlRequest },
  TContext
> => {
  const mutationOptions = getCrawlingControllerCrawlUrlMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Advanced website crawling with embeddings
 */
export const crawlingControllerCrawlWebsiteWithEmbedding = (
  advancedCrawlRequest: AdvancedCrawlRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AdvancedCrawlResult>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/crawling/advanced-crawl`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: advancedCrawlRequest,
      signal,
    },
    options
  );
};

export const getCrawlingControllerCrawlWebsiteWithEmbeddingMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof crawlingControllerCrawlWebsiteWithEmbedding>>,
    TError,
    { data: AdvancedCrawlRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof crawlingControllerCrawlWebsiteWithEmbedding>>,
  TError,
  { data: AdvancedCrawlRequest },
  TContext
> => {
  const mutationKey = ["crawlingControllerCrawlWebsiteWithEmbedding"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof crawlingControllerCrawlWebsiteWithEmbedding>>,
    { data: AdvancedCrawlRequest }
  > = (props) => {
    const { data } = props ?? {};

    return crawlingControllerCrawlWebsiteWithEmbedding(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CrawlingControllerCrawlWebsiteWithEmbeddingMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof crawlingControllerCrawlWebsiteWithEmbedding>>
  >;
export type CrawlingControllerCrawlWebsiteWithEmbeddingMutationBody =
  AdvancedCrawlRequest;
export type CrawlingControllerCrawlWebsiteWithEmbeddingMutationError = unknown;

/**
 * @summary Advanced website crawling with embeddings
 */
export const useCrawlingControllerCrawlWebsiteWithEmbedding = <
  TError = unknown,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof crawlingControllerCrawlWebsiteWithEmbedding>>,
      TError,
      { data: AdvancedCrawlRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof crawlingControllerCrawlWebsiteWithEmbedding>>,
  TError,
  { data: AdvancedCrawlRequest },
  TContext
> => {
  const mutationOptions =
    getCrawlingControllerCrawlWebsiteWithEmbeddingMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const crawlingControllerSearchSimilar = (
  searchRequest: SearchRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/crawling/search`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: searchRequest,
      signal,
    },
    options
  );
};

export const getCrawlingControllerSearchSimilarMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof crawlingControllerSearchSimilar>>,
    TError,
    { data: SearchRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof crawlingControllerSearchSimilar>>,
  TError,
  { data: SearchRequest },
  TContext
> => {
  const mutationKey = ["crawlingControllerSearchSimilar"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof crawlingControllerSearchSimilar>>,
    { data: SearchRequest }
  > = (props) => {
    const { data } = props ?? {};

    return crawlingControllerSearchSimilar(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CrawlingControllerSearchSimilarMutationResult = NonNullable<
  Awaited<ReturnType<typeof crawlingControllerSearchSimilar>>
>;
export type CrawlingControllerSearchSimilarMutationBody = SearchRequest;
export type CrawlingControllerSearchSimilarMutationError = unknown;

export const useCrawlingControllerSearchSimilar = <
  TError = unknown,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof crawlingControllerSearchSimilar>>,
      TError,
      { data: SearchRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof crawlingControllerSearchSimilar>>,
  TError,
  { data: SearchRequest },
  TContext
> => {
  const mutationOptions =
    getCrawlingControllerSearchSimilarMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const crawlingControllerBatchCrawl = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/crawling/batch-crawl`,
      method: "POST",
      signal,
    },
    options
  );
};

export const getCrawlingControllerBatchCrawlMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof crawlingControllerBatchCrawl>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof crawlingControllerBatchCrawl>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["crawlingControllerBatchCrawl"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof crawlingControllerBatchCrawl>>,
    void
  > = () => {
    return crawlingControllerBatchCrawl(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CrawlingControllerBatchCrawlMutationResult = NonNullable<
  Awaited<ReturnType<typeof crawlingControllerBatchCrawl>>
>;

export type CrawlingControllerBatchCrawlMutationError = unknown;

export const useCrawlingControllerBatchCrawl = <
  TError = unknown,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof crawlingControllerBatchCrawl>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof crawlingControllerBatchCrawl>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getCrawlingControllerBatchCrawlMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const crawlingControllerGetCrawlStatus = (
  jobId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/crawling/status/${jobId}`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getCrawlingControllerGetCrawlStatusQueryKey = (jobId?: string) => {
  return [
    `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/crawling/status/${jobId}`,
  ] as const;
};

export const getCrawlingControllerGetCrawlStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
  TError = unknown
>(
  jobId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCrawlingControllerGetCrawlStatusQueryKey(jobId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>
  > = ({ signal }) =>
    crawlingControllerGetCrawlStatus(jobId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!jobId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CrawlingControllerGetCrawlStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>
>;
export type CrawlingControllerGetCrawlStatusQueryError = unknown;

export function useCrawlingControllerGetCrawlStatus<
  TData = Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
  TError = unknown
>(
  jobId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
          TError,
          Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCrawlingControllerGetCrawlStatus<
  TData = Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
  TError = unknown
>(
  jobId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
          TError,
          Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCrawlingControllerGetCrawlStatus<
  TData = Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
  TError = unknown
>(
  jobId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useCrawlingControllerGetCrawlStatus<
  TData = Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
  TError = unknown
>(
  jobId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof crawlingControllerGetCrawlStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCrawlingControllerGetCrawlStatusQueryOptions(
    jobId,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const crawlingControllerGetCrawlResults = (
  jobId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/crawling/results/${jobId}`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getCrawlingControllerGetCrawlResultsQueryKey = (
  jobId?: string
) => {
  return [
    `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/crawling/results/${jobId}`,
  ] as const;
};

export const getCrawlingControllerGetCrawlResultsQueryOptions = <
  TData = Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
  TError = unknown
>(
  jobId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCrawlingControllerGetCrawlResultsQueryKey(jobId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>
  > = ({ signal }) =>
    crawlingControllerGetCrawlResults(jobId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!jobId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CrawlingControllerGetCrawlResultsQueryResult = NonNullable<
  Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>
>;
export type CrawlingControllerGetCrawlResultsQueryError = unknown;

export function useCrawlingControllerGetCrawlResults<
  TData = Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
  TError = unknown
>(
  jobId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
          TError,
          Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCrawlingControllerGetCrawlResults<
  TData = Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
  TError = unknown
>(
  jobId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
          TError,
          Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCrawlingControllerGetCrawlResults<
  TData = Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
  TError = unknown
>(
  jobId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useCrawlingControllerGetCrawlResults<
  TData = Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
  TError = unknown
>(
  jobId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof crawlingControllerGetCrawlResults>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCrawlingControllerGetCrawlResultsQueryOptions(
    jobId,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get bot messages from Slack channels
 */
export const slackControllerGetBotMessages = (
  params?: SlackControllerGetBotMessagesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<BotMessagesResponse>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/messages`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getSlackControllerGetBotMessagesQueryKey = (
  params?: SlackControllerGetBotMessagesParams
) => {
  return [
    `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/messages`,
    ...(params ? [params] : []),
  ] as const;
};

export const getSlackControllerGetBotMessagesQueryOptions = <
  TData = Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
  TError = unknown
>(
  params?: SlackControllerGetBotMessagesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSlackControllerGetBotMessagesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof slackControllerGetBotMessages>>
  > = ({ signal }) =>
    slackControllerGetBotMessages(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SlackControllerGetBotMessagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof slackControllerGetBotMessages>>
>;
export type SlackControllerGetBotMessagesQueryError = unknown;

export function useSlackControllerGetBotMessages<
  TData = Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
  TError = unknown
>(
  params: undefined | SlackControllerGetBotMessagesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
          TError,
          Awaited<ReturnType<typeof slackControllerGetBotMessages>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlackControllerGetBotMessages<
  TData = Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
  TError = unknown
>(
  params?: SlackControllerGetBotMessagesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
          TError,
          Awaited<ReturnType<typeof slackControllerGetBotMessages>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlackControllerGetBotMessages<
  TData = Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
  TError = unknown
>(
  params?: SlackControllerGetBotMessagesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get bot messages from Slack channels
 */

export function useSlackControllerGetBotMessages<
  TData = Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
  TError = unknown
>(
  params?: SlackControllerGetBotMessagesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetBotMessages>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSlackControllerGetBotMessagesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update a Slack message
 */
export const slackControllerUpdateMessage = (
  updateMessageRequest: UpdateMessageRequest,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<MessageActionResponse>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/messages`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateMessageRequest,
    },
    options
  );
};

export const getSlackControllerUpdateMessageMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof slackControllerUpdateMessage>>,
    TError,
    { data: UpdateMessageRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof slackControllerUpdateMessage>>,
  TError,
  { data: UpdateMessageRequest },
  TContext
> => {
  const mutationKey = ["slackControllerUpdateMessage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof slackControllerUpdateMessage>>,
    { data: UpdateMessageRequest }
  > = (props) => {
    const { data } = props ?? {};

    return slackControllerUpdateMessage(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SlackControllerUpdateMessageMutationResult = NonNullable<
  Awaited<ReturnType<typeof slackControllerUpdateMessage>>
>;
export type SlackControllerUpdateMessageMutationBody = UpdateMessageRequest;
export type SlackControllerUpdateMessageMutationError = unknown;

/**
 * @summary Update a Slack message
 */
export const useSlackControllerUpdateMessage = <
  TError = unknown,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof slackControllerUpdateMessage>>,
      TError,
      { data: UpdateMessageRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof slackControllerUpdateMessage>>,
  TError,
  { data: UpdateMessageRequest },
  TContext
> => {
  const mutationOptions =
    getSlackControllerUpdateMessageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const slackControllerDeleteMessage = (
  deleteMessageRequest: DeleteMessageRequest,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/messages`,
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      data: deleteMessageRequest,
    },
    options
  );
};

export const getSlackControllerDeleteMessageMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof slackControllerDeleteMessage>>,
    TError,
    { data: DeleteMessageRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof slackControllerDeleteMessage>>,
  TError,
  { data: DeleteMessageRequest },
  TContext
> => {
  const mutationKey = ["slackControllerDeleteMessage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof slackControllerDeleteMessage>>,
    { data: DeleteMessageRequest }
  > = (props) => {
    const { data } = props ?? {};

    return slackControllerDeleteMessage(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SlackControllerDeleteMessageMutationResult = NonNullable<
  Awaited<ReturnType<typeof slackControllerDeleteMessage>>
>;
export type SlackControllerDeleteMessageMutationBody = DeleteMessageRequest;
export type SlackControllerDeleteMessageMutationError = unknown;

export const useSlackControllerDeleteMessage = <
  TError = unknown,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof slackControllerDeleteMessage>>,
      TError,
      { data: DeleteMessageRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof slackControllerDeleteMessage>>,
  TError,
  { data: DeleteMessageRequest },
  TContext
> => {
  const mutationOptions =
    getSlackControllerDeleteMessageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const slackControllerSendMessage = (
  sendMessageRequest: SendMessageRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/messages`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: sendMessageRequest,
      signal,
    },
    options
  );
};

export const getSlackControllerSendMessageMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof slackControllerSendMessage>>,
    TError,
    { data: SendMessageRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof slackControllerSendMessage>>,
  TError,
  { data: SendMessageRequest },
  TContext
> => {
  const mutationKey = ["slackControllerSendMessage"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof slackControllerSendMessage>>,
    { data: SendMessageRequest }
  > = (props) => {
    const { data } = props ?? {};

    return slackControllerSendMessage(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SlackControllerSendMessageMutationResult = NonNullable<
  Awaited<ReturnType<typeof slackControllerSendMessage>>
>;
export type SlackControllerSendMessageMutationBody = SendMessageRequest;
export type SlackControllerSendMessageMutationError = unknown;

export const useSlackControllerSendMessage = <
  TError = unknown,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof slackControllerSendMessage>>,
      TError,
      { data: SendMessageRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof slackControllerSendMessage>>,
  TError,
  { data: SendMessageRequest },
  TContext
> => {
  const mutationOptions = getSlackControllerSendMessageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const slackControllerGetMessageDetails = (
  channelId: string,
  timestamp: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/messages/${channelId}/${timestamp}`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getSlackControllerGetMessageDetailsQueryKey = (
  channelId?: string,
  timestamp?: string
) => {
  return [
    `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/messages/${channelId}/${timestamp}`,
  ] as const;
};

export const getSlackControllerGetMessageDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
  TError = unknown
>(
  channelId: string,
  timestamp: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSlackControllerGetMessageDetailsQueryKey(channelId, timestamp);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof slackControllerGetMessageDetails>>
  > = ({ signal }) =>
    slackControllerGetMessageDetails(
      channelId,
      timestamp,
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(channelId && timestamp),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SlackControllerGetMessageDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof slackControllerGetMessageDetails>>
>;
export type SlackControllerGetMessageDetailsQueryError = unknown;

export function useSlackControllerGetMessageDetails<
  TData = Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
  TError = unknown
>(
  channelId: string,
  timestamp: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
          TError,
          Awaited<ReturnType<typeof slackControllerGetMessageDetails>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlackControllerGetMessageDetails<
  TData = Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
  TError = unknown
>(
  channelId: string,
  timestamp: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
          TError,
          Awaited<ReturnType<typeof slackControllerGetMessageDetails>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlackControllerGetMessageDetails<
  TData = Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
  TError = unknown
>(
  channelId: string,
  timestamp: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSlackControllerGetMessageDetails<
  TData = Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
  TError = unknown
>(
  channelId: string,
  timestamp: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetMessageDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSlackControllerGetMessageDetailsQueryOptions(
    channelId,
    timestamp,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const slackControllerDeleteMessageByParams = (
  channelId: string,
  timestamp: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/messages/${channelId}/${timestamp}`,
      method: "DELETE",
    },
    options
  );
};

export const getSlackControllerDeleteMessageByParamsMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof slackControllerDeleteMessageByParams>>,
    TError,
    { channelId: string; timestamp: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof slackControllerDeleteMessageByParams>>,
  TError,
  { channelId: string; timestamp: string },
  TContext
> => {
  const mutationKey = ["slackControllerDeleteMessageByParams"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof slackControllerDeleteMessageByParams>>,
    { channelId: string; timestamp: string }
  > = (props) => {
    const { channelId, timestamp } = props ?? {};

    return slackControllerDeleteMessageByParams(
      channelId,
      timestamp,
      requestOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type SlackControllerDeleteMessageByParamsMutationResult = NonNullable<
  Awaited<ReturnType<typeof slackControllerDeleteMessageByParams>>
>;

export type SlackControllerDeleteMessageByParamsMutationError = unknown;

export const useSlackControllerDeleteMessageByParams = <
  TError = unknown,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof slackControllerDeleteMessageByParams>>,
      TError,
      { channelId: string; timestamp: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof slackControllerDeleteMessageByParams>>,
  TError,
  { channelId: string; timestamp: string },
  TContext
> => {
  const mutationOptions =
    getSlackControllerDeleteMessageByParamsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const slackControllerGetChannelList = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/channels`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getSlackControllerGetChannelListQueryKey = () => {
  return [
    `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/channels`,
  ] as const;
};

export const getSlackControllerGetChannelListQueryOptions = <
  TData = Awaited<ReturnType<typeof slackControllerGetChannelList>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof slackControllerGetChannelList>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSlackControllerGetChannelListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof slackControllerGetChannelList>>
  > = ({ signal }) => slackControllerGetChannelList(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof slackControllerGetChannelList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SlackControllerGetChannelListQueryResult = NonNullable<
  Awaited<ReturnType<typeof slackControllerGetChannelList>>
>;
export type SlackControllerGetChannelListQueryError = unknown;

export function useSlackControllerGetChannelList<
  TData = Awaited<ReturnType<typeof slackControllerGetChannelList>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetChannelList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof slackControllerGetChannelList>>,
          TError,
          Awaited<ReturnType<typeof slackControllerGetChannelList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlackControllerGetChannelList<
  TData = Awaited<ReturnType<typeof slackControllerGetChannelList>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetChannelList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof slackControllerGetChannelList>>,
          TError,
          Awaited<ReturnType<typeof slackControllerGetChannelList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlackControllerGetChannelList<
  TData = Awaited<ReturnType<typeof slackControllerGetChannelList>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetChannelList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSlackControllerGetChannelList<
  TData = Awaited<ReturnType<typeof slackControllerGetChannelList>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetChannelList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSlackControllerGetChannelListQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const slackControllerGetBotStats = (
  params: SlackControllerGetBotStatsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/stats`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getSlackControllerGetBotStatsQueryKey = (
  params?: SlackControllerGetBotStatsParams
) => {
  return [
    `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/stats`,
    ...(params ? [params] : []),
  ] as const;
};

export const getSlackControllerGetBotStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof slackControllerGetBotStats>>,
  TError = unknown
>(
  params: SlackControllerGetBotStatsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetBotStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSlackControllerGetBotStatsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof slackControllerGetBotStats>>
  > = ({ signal }) =>
    slackControllerGetBotStats(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof slackControllerGetBotStats>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SlackControllerGetBotStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof slackControllerGetBotStats>>
>;
export type SlackControllerGetBotStatsQueryError = unknown;

export function useSlackControllerGetBotStats<
  TData = Awaited<ReturnType<typeof slackControllerGetBotStats>>,
  TError = unknown
>(
  params: SlackControllerGetBotStatsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetBotStats>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof slackControllerGetBotStats>>,
          TError,
          Awaited<ReturnType<typeof slackControllerGetBotStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlackControllerGetBotStats<
  TData = Awaited<ReturnType<typeof slackControllerGetBotStats>>,
  TError = unknown
>(
  params: SlackControllerGetBotStatsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetBotStats>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof slackControllerGetBotStats>>,
          TError,
          Awaited<ReturnType<typeof slackControllerGetBotStats>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlackControllerGetBotStats<
  TData = Awaited<ReturnType<typeof slackControllerGetBotStats>>,
  TError = unknown
>(
  params: SlackControllerGetBotStatsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetBotStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSlackControllerGetBotStats<
  TData = Awaited<ReturnType<typeof slackControllerGetBotStats>>,
  TError = unknown
>(
  params: SlackControllerGetBotStatsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerGetBotStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSlackControllerGetBotStatsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Test Slack bot authentication
 */
export const slackControllerTestAuth = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<null>(
    {
      url: `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/test-auth`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getSlackControllerTestAuthQueryKey = () => {
  return [
    `http://ec2-43-201-67-242.ap-northeast-2.compute.amazonaws.com:5000/slack/test-auth`,
  ] as const;
};

export const getSlackControllerTestAuthQueryOptions = <
  TData = Awaited<ReturnType<typeof slackControllerTestAuth>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof slackControllerTestAuth>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSlackControllerTestAuthQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof slackControllerTestAuth>>
  > = ({ signal }) => slackControllerTestAuth(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof slackControllerTestAuth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SlackControllerTestAuthQueryResult = NonNullable<
  Awaited<ReturnType<typeof slackControllerTestAuth>>
>;
export type SlackControllerTestAuthQueryError = unknown;

export function useSlackControllerTestAuth<
  TData = Awaited<ReturnType<typeof slackControllerTestAuth>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerTestAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof slackControllerTestAuth>>,
          TError,
          Awaited<ReturnType<typeof slackControllerTestAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlackControllerTestAuth<
  TData = Awaited<ReturnType<typeof slackControllerTestAuth>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerTestAuth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof slackControllerTestAuth>>,
          TError,
          Awaited<ReturnType<typeof slackControllerTestAuth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlackControllerTestAuth<
  TData = Awaited<ReturnType<typeof slackControllerTestAuth>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerTestAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Test Slack bot authentication
 */

export function useSlackControllerTestAuth<
  TData = Awaited<ReturnType<typeof slackControllerTestAuth>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slackControllerTestAuth>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSlackControllerTestAuthQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
